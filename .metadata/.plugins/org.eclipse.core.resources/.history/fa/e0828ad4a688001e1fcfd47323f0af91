package jogo;

import java.awt.EventQueue;

import javax.swing.JFrame;

import javax.swing.JButton;

import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Scanner;
import java.awt.event.ActionEvent;
import java.awt.GridLayout;
import javax.swing.JPanel;


public class Combate {
	
	String buttonName = "";
	
	ServerSocket servidor;
	Socket cliente;
	PrintWriter saida;
	BufferedReader entrada;

	boolean gameStart = false;

	AgenteSecreto agente = new AgenteSecreto(1,"Agente",1);
	Soldado soldado = new Soldado(2,"Soldado",1/*8*/);
	Cabo cabo = new Cabo(3,"Cabo",1/*5*/);
	Sargento sargento = new Sargento(4,"Sargento",1/*4*/);
	Subtenente subtenente = new Subtenente(5,"Subtenente",1/*4*/);
	Tenente tenente = new Tenente(6,"Tenente",1/*4*/);
	Capitao capitao = new Capitao(7,"Capitão",1/*3*/);
	Major major = new Major(8,"Major",1/*2*/);
	Coronel coronel = new Coronel(9,"Coronel",1);
	General general = new General(10,"General",1);
	//prisioneiro
	//minas 6

	ArrayList<Exercito> exercito = new ArrayList<>();

	private JFrame frmServidor;

	public JButton[][] botoes = new JButton[10][10];

	JButton lastButton = null;

	int z = 0; //auxiliar

	JButton direita = null;
	JButton esquerda = null;
	JButton cima = null;
	JButton baixo = null;

	boolean caminhando = false;
	JButton backup = null;

	JButton botao;

	boolean umaVez;

	//PROPORÇÕES DOS BOTOES
	int tamanhoButtonX = 70; 
	int tamanhoButtonY = 48;
	/**
	 * Launch the application.
	 */
	public static void main(String[] args)  {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Combate window = new Combate();
					window.frmServidor.setVisible(true);

				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public Combate() {
		initialize();

		exercito.add(agente);
		for (int i = 0; i < soldado.quantidade; i++) {
			exercito.add(soldado);
		}
		for (int i = 0; i < cabo.quantidade; i++) {
			exercito.add(cabo);
		}
		for (int i = 0; i < sargento.quantidade; i++) {
			exercito.add(sargento);
		}
		for (int i = 0; i < subtenente.quantidade; i++) {
			exercito.add(subtenente);
		}
		for (int i = 0; i < tenente.quantidade; i++) {
			exercito.add(tenente);
		}
		for (int i = 0; i < capitao.quantidade; i++) {
			exercito.add(capitao);
		}
		for (int i = 0; i < major.quantidade; i++) {
			exercito.add(major);
		}
		exercito.add(coronel);
		exercito.add(general);



	}
	public void habilitar(){
		for (int k = 0; k < botoes.length; k++) {
			for (int l = 0; l < botoes.length; l++) {
				botoes[k][l].setEnabled(true);
			}
		}
	}
	public void desabilitar() {
		for (int k = 0; k < botoes.length; k++) {
			for (int l = 0; l < botoes.length; l++) {
				botoes[k][l].setEnabled(false);
			}
		}
	}
	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		
		try {
			servidor = new ServerSocket(82);
			cliente = servidor.accept();
			saida = new PrintWriter(cliente.getOutputStream());
			entrada = new BufferedReader(new InputStreamReader(cliente.getInputStream()));
			
			
			Thread remetente = new Thread(new Runnable() {
				public void run() {
					while (true) {
						saida.flush();
					}
				}
			});

			remetente.start();

			Thread receptor = new Thread(new Runnable() {
				public void run() {
					try {
						String mensagem = entrada.readLine();
						while (mensagem != null) {
							
							System.out.println("Cliente: " + mensagem);
							mensagem = entrada.readLine();
						}

						System.out.println("Cliente offline.");

						saida.close();
						cliente.close();
						servidor.close();

					} catch (IOException e) {
						e.printStackTrace();
					}
				}
			});

			receptor.start();
			
			System.out.println("Servidor online.");

		} catch (IOException e) {
			e.printStackTrace();
		}
	

		frmServidor = new JFrame();
		frmServidor.setTitle("Servidor");
		frmServidor.setResizable(false);
		frmServidor.setBounds(100, 100, 714, 525);
		frmServidor.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frmServidor.getContentPane().setLayout(new GridLayout(10, 10, 0, 0));


		//CRIAÇÃO DOS BOTOES
		for (int  i = 0; i < 10; i++) {
			for (int j = 0; j < 10; j++) {
				botao = new JButton("");
				botao.setName(String.valueOf(z + 1));
				botoes[i][j] = botao; 
				//System.out.println(botoes[i][j].getName());
				frmServidor.getContentPane().add(botao);
				z++;
				
			}

		}
		z = 0;
		umaVez = true; //variavel usada no gameStart
		for (int i = 0; i < botoes.length; i++) {
			for (int j = 0; j < botoes.length; j++) {
				//PRECISA FICAR CRIANDO BOTOES DIFERENTES
				JButton botaoClicado = botoes[i][j]; //é o botão que está sendo clicado

				//desabilita todos os botões onde não pode ser colocado os personagens
				if(Integer.parseInt(botaoClicado.getName()) <= 60) {
					botaoClicado.setEnabled(false);
					
				}
				
				botaoClicado.addActionListener(new ActionListener() {

					public void actionPerformed(ActionEvent e) {
						if(z < 10) { //mudar o 33 pra 40
							botaoClicado.setText(exercito.get(z).forca + "");
							saida.println(botaoClicado.getName() + botaoClicado.getText());
							saida.flush();
							botaoClicado.setEnabled(false);
							if(z == 9) { // = a 32 vai virar = 39, porque isso é para não precisar de uma variável por fora
								
								habilitar();

							}
							z++;
						}else {
							gameStart = true; //acabou de posicionar


							//JOGO INICIADO	
						}if(gameStart) {

							int x = botaoClicado.getX()/tamanhoButtonX; 
							int y = botaoClicado.getY()/tamanhoButtonY; 

							if (x != 0) { 
								direita = botoes[y][x-1];
							}
							if (x != 9) { 
								esquerda = botoes[y][x+1];
							}
							if (y != 0) { 
								cima = botoes[y-1][x];
							}
							if (y != 9) { 
								baixo = botoes[y+1][x];
							}

							desabilitar();
							
							//Essa variável resolve o problema de poder dar teleporte
							boolean antiTP = true;
							if(caminhando) {
								//Ao clicar para caminhar, vai desabilitar todos os lugares não possíveis
								desabilitar();
								System.out.println("x");
								//umaVez resolve o problema de andar infinitamente
								if(umaVez) {
									if(botaoClicado == backup){ //se clicar no botão duas vezes
										habilitar();
										
										caminhando = false;
										backup = null; 
										umaVez = false;
										antiTP = false;

									}
								}
								else if(backup != null){ //se clicar em qualquer outro botão    
									//esse habilitar resolve o problema de andar infinitamente
									habilitar();
									if(botaoClicado.getText() == "" ) { //NÃO PODE ABSORVER O MESMO TIME, TALVEZ PRECISE MUDAR DEPOIS QUANDO 
										//SE TIVER DOIS TIMES, TALVEZ SEJA POSSÍVEL UTILIZAR IDs, ID 1 próprio time, ID 2 outro time, ID 0, vazio
										botaoClicado.setText(backup.getText());
										backup.setText("");
										
										buttonName = botaoClicado.getName();
										
										saida.println(buttonName + botaoClicado.getText());
										saida.flush();
									}
									caminhando = false;
									backup = null;
									umaVez = false;

								}else if (antiTP){
									caminhando = false;
										umaVez = true; 
									
								}
							}	
							
							if(botaoClicado.getText() == "") {
								habilitar();

							}else {
								if(direita != null && /*Tem algo na direita*/direita.getText() == "" /*A casa esta vazia*/
										&& botaoClicado.getText() != "" /*O botaoClicado clicado não está vazio*/
										&& umaVez && direita.getX()/tamanhoButtonX == botaoClicado.getX()/tamanhoButtonX - 1 /*Isso é para "RESOLVER" 
										o bug de andar para mais longe do que os quadrados das pontas*/) {
									direita.setEnabled(true);
									//lastButton = botaoClicado;
								}
								if(esquerda != null && esquerda.getText() == "" && botaoClicado.getText() != "" && umaVez
										&& esquerda.getX()/tamanhoButtonX == botaoClicado.getX()/tamanhoButtonX + 1) {
									esquerda.setEnabled(true);
									//lastButton = botaoClicado;
								}
								if(cima != null && cima.getText() == "" && botaoClicado.getText() != "" && umaVez
										&& cima.getY()/tamanhoButtonY == botaoClicado.getY()/tamanhoButtonY - 1) {
									cima.setEnabled(true);
									//lastButton = botaoClicado;
								}
								if(baixo != null && baixo.getText() == "" && botaoClicado.getText() != "" && umaVez
										&& baixo.getY()/tamanhoButtonY == botaoClicado.getY()/tamanhoButtonY + 1) {
									baixo.setEnabled(true);
									//lastButton = botaoClicado;
								}
							}
							botaoClicado.setEnabled(true); //Habilitar o botão central

							if(botaoClicado.getText() != "") {
								if(umaVez) {
									backup = botaoClicado;
									umaVez = false;
								}

							}

							if(botaoClicado.getText() != "") {
								caminhando = true;

							}

						}

					}

				});

			}

		}

	}
}
